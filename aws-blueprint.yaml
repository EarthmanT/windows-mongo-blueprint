tosca_definitions_version: cloudify_dsl_1_3

imports:
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/4.1/resources/rest-service/cloudify/types/types.yaml
  - https://github.com/cloudify-cosmo/cloudify-aws-plugin/releases/download/1.5.1.2/plugin.yaml

inputs:

  ami:
    default: ami-bf3701df

  instance_type:
    default: t2.medium

  agent_user:
    default: Administrator

dsl_definitions:

    aws_config: &aws_config
      aws_access_key_id: { get_secret: aws_access_key_id }
      aws_secret_access_key: { get_secret: aws_secret_access_key }
      ec2_region_name: { get_secret: ec2_region_name }
      ec2_region_endpoint: { get_secret: ec2_region_endpoint }

node_templates:

  mongo:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/install.ps1
          inputs:
            process:
              command_prefix: powershell
              env:
                PSExecutionPolicyPreference: Unrestricted
    relationships:
    - type: cloudify.relationships.contained_in
      target: host

  host:
    type: cloudify.aws.nodes.WindowsInstance
    properties:
      agent_config:
        install_method: init_script
        port: 5985
        user: { get_input: agent_user }
        key: { get_secret: agent_key_private }
      aws_config: *aws_config
      image_id: { get_input: ami }
      instance_type: { get_input: instance_type }
      parameters:
        user_data: ''
        # user_data: |
        #   <powershell>
        #   winrm quickconfig -q
        #   winrm set winrm/config              '@{MaxTimeoutms="1800000"}'
        #   winrm set winrm/config/winrs        '@{MaxMemoryPerShellMB="300"}'
        #   winrm set winrm/config/service      '@{AllowUnencrypted="true"}'
        #   winrm set winrm/config/service/auth '@{Basic="true"}'
        #   &netsh advfirewall firewall add rule name="WinRM 5985" protocol=TCP dir=in localport=5985 action=allow
        #   &netsh advfirewall firewall add rule name="WinRM 5986" protocol=TCP dir=in localport=5986 action=allow
        #   </powershell>
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_keypair
        target: host_agent_key
      - type: cloudify.aws.relationships.instance_connected_to_subnet
        target: public_subnet
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: security_group
      - type: cloudify.aws.relationships.instance_connected_to_elastic_ip
        target: ip
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: aws.cloudify_aws.ec2.instance.create
          inputs:
            args:
              placement: { get_secret: availability_zone }

  host_agent_key:
    type: cloudify.aws.nodes.KeyPair
    properties:
      aws_config: *aws_config
      private_key_path: /etc/cloudify/host_agent_key.pem

  security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: Security group for Kubernetes Cluster
      rules:
        - ip_protocol: tcp
          from_port: 0
          to_port: 65535
          cidr_ip: 0.0.0.0/0
        - ip_protocol: udp
          from_port: 0
          to_port: 65535
          cidr_ip: 0.0.0.0/0
        - ip_protocol: icmp
          from_port: -1
          to_port: -1
          cidr_ip: 0.0.0.0/0
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  ip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *aws_config
      domain: vpc

  public_subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_secret: public_subnet_id }
      cidr_block: N/A
      availability_zone: N/A
    relationships:
      - type: cloudify.aws.relationships.subnet_contained_in_vpc
        target: vpc

  vpc:
    type: cloudify.aws.nodes.VPC
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_secret: vpc_id }
      cidr_block: N/A

outputs:

  ip:
    description: Public IP Address
    value: { get_attribute: [ ip, aws_resource_id ] }
